#################################
# DB reset                      #
#################################
MATCH n DETACH DELETE n
CREATE CONSTRAINT ON (u:Person) IS UNIQUE n.id

#################################
# SAVE REAL LINK                #
#################################
MERGE (u1:Person {id:{src}})
MERGE (u2:Person {id:{dst}})
MERGE (u1)-[r:REAL]-(u2)
ON CREATE SET r.weight={weight},r.num=1,r.created=timestamp(),r.updated=r.created
ON MATCH SET r.weight=(r.weight*r.num+{weight})/(r.num+1),r.num=r.num+1,r.updated=timestamp()

#################################
# SAVE POTENTIAL LINK           #
#################################
MERGE (u1:Person {id:{src}})
MERGE (u2:Person {id:{dst}})
MERGE (u1)-[r:POTENTIAL]-(u2)
ON CREATE SET r.weight={weight},r.created=timestamp(),r.updated=r.created
ON MATCH SET r.weight={weight},r.updated=timestamp()

#################################
# SAVE HIDDEN LINK              #
#################################
MERGE (u1:Person {id:{src}})
MERGE (u2:Person {id:{dst}})
MERGE (u1)-[r:HIDDEN]-(u2)
ON CREATE SET r.weight={weight},r.created=timestamp(),r.updated=r.created
ON MATCH SET r.weight={weight},r.updated=timestamp()

#################################
# CHECK PAIR                    #
#################################
dato arco (x,y) verifica loro esistenza, restituendo 00,01,10,11 come maschera di esistenza.

#################################
# NEIGHBOURHOOD                 #
#################################
MATCH (u1:Person {id:{src}})-[:REAL]-(n:Person) RETURN DISTINCT n.id AS id

#################################
# UPDATE                        #
#################################
dato nodo x, restituisce la lista di archi (x,b) e (a,b) non in G, dove a e b sono nodi vicini di x.

#################################
# UPDATE TWICE                  #
#################################
dato nodo x, restituisce l'insieme Cx di archi (x,b) e (a,b) non in G, dove a e b sono nodi vicini di x.
dato nodo y, restituisce l'insieme Cy di archi (y,b) e (a,b) non in G, dove a e b sono nodi vicini di y.
restituisce l'unione di Cx e Cy

#################################
# NEIGHBOURHOOD DISTANCE T      #
#################################
MATCH (u1:Person {id:{src}})-[:REAL*{distance}]-(n:Person) RETURN DISTINCT n.id AS id

#################################
# UPDATE DISTANCE T             #
#################################
dato nodo x, restituisce la lista di archi (x,b) e (a,b) non in G, dove a e b sono nodi a distanza t da x.

#################################
# UPDATE TWICE DISTANCE T       #
#################################
dato nodo x, restituisce l'insieme Cx di archi (x,b) e (a,b) non in G, dove a e b sono nodi a distanza t da x.
dato nodo y, restituisce l'insieme Cy di archi (y,b) e (a,b) non in G, dove a e b sono nodi a distanza t da y.
restituisce l'unione di Cx e Cy

#################################
# NEIGHBOURHOOD INTERSECTION    #
#################################
MATCH (u1:Person {id:{src}})-[:REAL]-(n:Person)-[:REAL]-(u2:Person {id:{dst}}) RETURN n.id AS id